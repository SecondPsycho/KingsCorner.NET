@inject IJSRuntime JS

<!-- Note: I had to add the _Imports.razor file for events to work. Source: https://stackoverflow.com/questions/58196812/blazor-onclick-event-not-triggered -->

<h1 class="game-header">King's Corner</h1>
<div class="game">
    <div class="board"> <!-- The Buttons -->
        <button id="tile00" class="tile" @onclick="() => Trigger(0,0)"><img class="card" src=@Get_Image(board[0,0]) alt=@To_Text(board[0,0]) title=@To_Text(board[0,0])></button>
        <button id="tile01" class="tile" @onclick="() => Trigger(0,1)"><img class="card" src=@Get_Image(board[0,1]) alt=@To_Text(board[0,1]) title=@To_Text(board[0,1])></button>
        <button id="tile02" class="tile" @onclick="() => Trigger(0,2)"><img class="card" src=@Get_Image(board[0,2]) alt=@To_Text(board[0,2]) title=@To_Text(board[0,2])></button>
        <button id="tile03" class="tile" @onclick="() => Trigger(0,3)"><img class="card" src=@Get_Image(board[0,3]) alt=@To_Text(board[0,3]) title=@To_Text(board[0,3])></button>
        <br>
        <button id="tile10" class="tile" @onclick="() => Trigger(1,0)"><img class="card" src=@Get_Image(board[1,0]) alt=@To_Text(board[1,0]) title=@To_Text(board[1,0])></button>
        <button id="tile11" class="tile" @onclick="() => Trigger(1,1)"><img class="card" src=@Get_Image(board[1,1]) alt=@To_Text(board[1,1]) title=@To_Text(board[1,1])></button>
        <button id="tile12" class="tile" @onclick="() => Trigger(1,2)"><img class="card" src=@Get_Image(board[1,2]) alt=@To_Text(board[1,2]) title=@To_Text(board[1,2])></button>
        <button id="tile13" class="tile" @onclick="() => Trigger(1,3)"><img class="card" src=@Get_Image(board[1,3]) alt=@To_Text(board[1,3]) title=@To_Text(board[1,3])></button>
        <br>
        <button id="tile20" class="tile" @onclick="() => Trigger(2,0)"><img class="card" src=@Get_Image(board[2,0]) alt=@To_Text(board[2,0]) title=@To_Text(board[2,0])></button>
        <button id="tile21" class="tile" @onclick="() => Trigger(2,1)"><img class="card" src=@Get_Image(board[2,1]) alt=@To_Text(board[2,1]) title=@To_Text(board[2,1])></button>
        <button id="tile22" class="tile" @onclick="() => Trigger(2,2)"><img class="card" src=@Get_Image(board[2,2]) alt=@To_Text(board[2,2]) title=@To_Text(board[2,2])></button>
        <button id="tile23" class="tile" @onclick="() => Trigger(2,3)"><img class="card" src=@Get_Image(board[2,3]) alt=@To_Text(board[2,3]) title=@To_Text(board[2,3])></button>
        <br>
        <button id="tile30" class="tile" @onclick="() => Trigger(3,0)"><img class="card" src=@Get_Image(board[3,0]) alt=@To_Text(board[3,0]) title=@To_Text(board[3,0])></button>
        <button id="tile31" class="tile" @onclick="() => Trigger(3,1)"><img class="card" src=@Get_Image(board[3,1]) alt=@To_Text(board[3,1]) title=@To_Text(board[3,1])></button>
        <button id="tile32" class="tile" @onclick="() => Trigger(3,2)"><img class="card" src=@Get_Image(board[3,2]) alt=@To_Text(board[3,2]) title=@To_Text(board[3,2])></button>
        <button id="tile33" class="tile" @onclick="() => Trigger(3,3)"><img class="card" src=@Get_Image(board[3,3]) alt=@To_Text(board[3,3]) title=@To_Text(board[3,3])></button>
        <br>
    </div>
    <div class="side-board"> <!-- Output Messages -->
        <div class="output">
            <br>
            <p class="output-text">@output_message_0</p> <!-- Usually reports the next card -->
            <img class="card" style="margin:auto;" src=@Get_Image(output_image) atl=@To_Text(output_image) title=@To_Text(output_image)> <!-- Show the user which card is next -->
            <p class="output-text">@output_message_1</p> <!-- Usually reports control feedback & error messages -->
        </div>
        <div class="controls"> <!-- Game Options -->
            <br>
            <button class="control-btn" @onclick="Undo">Undo</button>
            <br>
            <button class="control-btn" @onclick="New_Game">New Game</button>
        </div>
    </div>
</div>

@code {

/* Yeah this don't work. Maybe if I convert it to Javascript. WIP
    public string Print_Button(int y_par, int x_par) {
        char y = (char)y_par;
        char x = (char)x_par;
        return "<button class=\"tile\" @onclick=\"() => Trigger(" + y + ',' + x + 
                ")\"><img class=\"card\" src=@Get_Image(board[" + y + ',' + x + 
                "]) alt=@To_Text(board[" + y + ',' + x + 
                "]) title=@To_Text(board[" + y + ',' + x + 
                "])></button>"; 
    }
*/


    /* USEFUL CLASSES */
    //A Node for the Actions_List linked-list
    public class Action_Node {
        public Action_Node() {
            prev = this;
            next = this;
            
            action_code = -1;
            card_a = "__";
            tile_a = new Coords();
            card_b = "__";
            tile_b = new Coords();
        }
        public Action_Node(Action_Node prev_par, Action_Node next_par, int action_code_par, 
                            string card_a_par, int y_a_par, int x_a_par) {
            prev = prev_par;
            next = next_par;
            
            action_code = action_code_par;
            card_a = card_a_par;
            tile_a = new Coords(y_a_par, x_a_par);
            card_b = "__";
            tile_b = new Coords();
        }
        public Action_Node(Action_Node prev_par, Action_Node next_par, int action_code_par, 
                            string card_a_par, int y_a_par, int x_a_par,
                            string card_b_par, int y_b_par, int x_b_par) {
            prev = prev_par;
            next = next_par;
            
            action_code = action_code_par;
            card_a = card_a_par;
            tile_a = new Coords(y_a_par, x_a_par);
            card_b = card_b_par;
            tile_b = new Coords(y_b_par, x_b_par);
        }
        /* Action Code Key
         * 0 : Placed a Card
         * 1 : Matched card(s)
        //*/
        public int action_code;
        public string card_a;       //name of the first card
        public string card_b;       //name of the second card (only used for 'match' commands)
        public Coords tile_a;       //coordinates of the first card
        public Coords tile_b;       //coordinates of the second card (only used for 'match' commands)
        public Action_Node prev;    //link to the previous item in the linked list (so we can pop like a stack)
        public Action_Node next;    //link to the next item in the linked list
    }

    //A Linked List to store Undo-able actions
    public class Actions_List {
        public Actions_List() {
            nuller = new Action_Node();
            header = nuller;
            footer = nuller;
            Length = 0;
        }

        //Add an item to the linked list. It might be an empty node, it might have 1 card, or it might have 2 cards.
        public void Append() {
            Action_Node new_node = new Action_Node();
            if (header == nuller) { header = new_node; };
            new_node.next = nuller;
            new_node.prev = footer;
            if (footer != nuller) { footer.next = new_node; };
            footer = new_node;
            Length++;
        }
        public void Append(int action_code_par, string card_a_par, Coords card_a_coords) {
            Action_Node new_node = new Action_Node(footer, nuller, action_code_par, 
                                                    card_a_par, card_a_coords.y, card_a_coords.x);
            if (header == nuller) { header = new_node; };
            if (footer != nuller) { footer.next = new_node; };
            footer = new_node;
            Length++;
        }
        public void Append(int action_code_par, string card_a_par, Coords card_a_coords, string card_b_par,Coords card_b_coords) {
            Action_Node new_node = new Action_Node(footer, nuller, action_code_par, 
                                                    card_a_par, card_a_coords.y, card_a_coords.x,
                                                    card_b_par, card_b_coords.y, card_b_coords.x);
            if (header == nuller) { header = new_node; };
            if (footer != nuller) { footer.next = new_node; };
            footer = new_node;
            Length++;
        }

        //Pop off the last item in the linked list
        public Action_Node Pop() {
            Action_Node old_node = footer;
            footer = old_node.prev;
            footer.next = nuller;
            if (old_node == header) { header = nuller; };
            Length--;
            return old_node;
        }

        //Print the Current Undo Stack to the command line
        public void Print() {
            Console.WriteLine("Current Undo Stack:");
            Action_Node here = header;
            while (here != nuller) {
                if (here.action_code == 0) {
                    Console.WriteLine($"  Placed {here.card_a} at ({here.tile_a.x}, {here.tile_a.y}).");
                } else {
                    if (here.card_a == here.card_b) {
                        Console.WriteLine($"  Removed {here.card_a} from ({here.tile_a.x}, {here.tile_a.y}).");
                    } else {
                    Console.WriteLine($"  Matched {here.card_a} at ({here.tile_a.x}, {here.tile_a.y}) with {here.card_b} at ({here.tile_b.x}, {here.tile_b.y}).");
                    };
                };
                here = here.next;
            };
        }

        private Action_Node header; //head of the linked list
        private Action_Node footer; //end of the linked list
        private Action_Node nuller; //null node for when the list is empty
        public int Length;          //a variable to hold the length of the list (not currently used for anything)
    }

    //A class to store board coordinates
    public class Coords 
    {
        //Coords can be initialized with input data, or as null
        public Coords(int y_par, int x_par) {
            y = y_par;
            x = x_par;
            is_valid = true;
        }
        public Coords() {
            y = -1;
            x = -1;
            is_valid = false;
        }

        //Set the coordinate values
        public void Set(int y_par, int x_par) {
            y = y_par;
            x = x_par;
            is_valid = true;
        }
        
        //Reset to null
        public void Reset() {
            y = -1;
            x = -1;
            is_valid = false;
        }

        //Check if these Coords match another
        public bool Equals(Coords other) {
            return (x == other.x && y == other.y);
        }

        public int y;           //y coordinate (the row, always goes first)
        public int x;           //x coordinate (the column, always goes second)
        
        public bool is_valid;   //is not null coordinates
    }


    /* INITIALIZE GLOBAL DATA */
    //Define a Deck
    private string[] deck = new string[] {
        "AD","2D","3D","4D","5D","6D","7D","8D","9D","0D","JD","QD","KD",
        "AH","2H","3H","4H","5H","6H","7H","8H","9H","0H","JH","QH","KH",
        "AC","2C","3C","4C","5C","6C","7C","8C","9C","0C","JC","QC","KC",
        "AS","2S","3S","4S","5S","6S","7S","8S","9S","0S","JS","QS","KS"};

    //Define a Board
    private string[,] board = new string[4,4] {
        {"__","__","__","__"},
        {"__","__","__","__"},
        {"__","__","__","__"},
        {"__","__","__","__"}};
    
    Actions_List undo_stack = new Actions_List();                   //A Stack to enable undo functionality    
    private Coords selected_tile = new Coords();                    //Define the Currently Selected Card
    private string output_message_0 = "Welcome to King's Corner!";  //Usually reports the next card
    private string output_message_1 = "Press 'New Game' to begin."; //Usually reports control feedback & error messages
    private string output_image = "__";                             //Selects a card to show to the user
    private int current_card_index = 0;                             //Define the Current Card Index
    private bool game_on = false;                                   //Define a variable for if we are currently in-game

    /* DISPLAY FUNCTIONS */
    //For displaying the Board
    private string Get_Image(string card) {
        return "/Images/cards/" + card + ".png";
    }

    //For displaying mouseover and alt text
    private string To_Text(string card) {
        string output = "";
        switch (card[0]) {
            case 'A':
                output += "Ace";
                break;
            case '2':
                output += "Two";
                break;
            case '3':
                output += "Three";
                break;
            case '4':
                output += "Four";
                break;
            case '5':
                output += "Five";
                break;
            case '6':
                output += "Six";
                break;
            case '7':
                output += "Seven";
                break;
            case '8':
                output += "Eight";
                break;
            case '9':
                output += "Nine";
                break;
            case '0':
                output += "Ten";
                break;
            case 'J':
                output += "Jack";
                break;
            case 'Q':
                output += "Queen";
                break;
            case 'K':
                output += "King";
                break;
            default:
                return "Empty Tile";
                //output += "Unknown";
                //break;
        }
        output += " of ";
        switch (card[1]) {
            case 'D':
                output += "Diamonds";
                break;
            case 'S':
                output += "Spades";
                break;
            case 'H':
                output += "Hearts";
                break;
            case 'C':
                output += "Clubs";
                break;
            default:
                output += "Unknown";
                break;
        }
        return output;
    }

    /* HELPER FUNCTIONS */
    //Shuffle helper function; swaps two card locations in a given deck
    private static void Swap(string[] deck_par, int index0, int index1){
        var tmp = deck_par[index0];
        deck_par[index0] = deck_par[index1];
        deck_par[index1] = tmp;
    }

    //Randomly shuffle the deck
    private static void Shuffle(string[] deck_par) {
        Random rnd = new Random();
        int len = deck_par.Length;
        for (int i = 1; i < len; i++) {
            Swap(deck_par, i, rnd.Next()%(i+1));
        };
    }

    //Is_Not_Winnable helper function; counts how many tiles cannot be matched or played on
    private int Locked_Tile_Count(int court_count_par, int[] match_counts_par) {
        for (int i = 0; i < match_counts_par.Length; i++) {
            switch (match_counts_par[i]) {
                case > 0:
                    court_count_par += match_counts_par[i];
                    break;
                case < 0:
                    court_count_par -= match_counts_par[i];
                    break;
                default:
                    break;
            };
        };
        return court_count_par;
    }

    //See if the current deck shuffle produced a winnable game
    private bool Is_Not_Winnable(string[] deck_par) {
        int court_count = 0;
        int[] match_counts = new int[5] {0,0,0,0,0};
        for (int i = 0; i < deck_par.Length; i++) {
            switch (deck_par[i][0]) {
                case 'K':
                case 'Q':
                case 'J':
                    court_count++;
                    break;
                case 'A':
                    match_counts[0]--;
                    break;
                default:
                    int card_value = deck_par[i][0] - '0';
                    switch (card_value) {
                        case 0:
                            break;
                        case 5:
                            if (match_counts[4] == 1) { match_counts[4] = 0; } 
                            else { match_counts[4] = 1; };
                            break;
                        case < 5:
                            match_counts[card_value-1]--;
                            break;
                        case > 5:
                            match_counts[9-card_value]++;
                            break;
                    }
                    break;
            }

            if (Locked_Tile_Count(court_count, match_counts) >= 16) {
                return true;
            }
        }
        return false;
    }

    //Check if two tiles contain matchable cards
    private bool Matches(Coords tile_a, Coords tile_b) {
        char char_a = board[tile_a.y,tile_a.x][0];
        char char_b = board[tile_b.y,tile_b.x][0];

        switch (char_a) {
        case 'A':
            if (char_b == '9') { return true; }
            else { return false; };
        case '0':
            if (char_b == '0') { return true; }
            else { return false; };
        case 'J':
        case 'Q':
        case 'K':
            return false;
        default:
            switch (char_b) {
                case 'A':
                    if (char_a == '9') { return true; }
                    else { return false; };
                case 'J':
                case 'Q':
                case 'K':
                    return false;
                default:
                    if (((char_a - '0') + (char_b - '0') == 10) && !tile_a.Equals(tile_b)) { 
                        return true; 
                    }
                    else { return false; };
            };
        };
    }

    //Check if a tile can legally contain a given card
    int ValidMove(Coords target, string card) {
    /* Return Code Key
     * 0: Valid Input
     * 1: Invalid Jack Placement
     * 2: Invalid Queen Placement
     * 3: Invalid King Placement
    //*/
        switch (card[0]) {
            case 'J':
                if ((target.x == 1 || target.x == 2) && (target.y == 0 || target.y == 3)) {
                    return 0;
                };
                output_message_1 = "Jacks can only go on the top or bottom rows (but not corners).";
                return 1;
            case 'Q':
                if ((target.x == 0 || target.x == 3) && (target.y == 1 || target.y == 2)) {
                    return 0;
                };
                output_message_1 = "Queens can only go on the sides (but not corners).";
                return 2;
            case 'K':
                if ((target.x == 0 || target.x == 3) && (target.y == 0 || target.y == 3)) {
                    return 0;
                };
                output_message_1 = "Kings can only go in corners.";
                return 3;
            default:
                return 0;
        };
    }

    //Search for Valid Moves
    private bool No_Valid_Moves(string card) {
        //First, check if there's a place the King, Queen or Jack could go
        switch (card[0]) {
            case 'K':
                for (int i = 0; i < 4; i += 3) {
                    for (int j = 0; j < 4; j += 3) {
                        if (board[j,i] == "__") { return false; };
                    }
                }
                break;
            case 'Q':
                for (int i = 0; i < 4; i += 3) {
                    for (int j = 1; j < 3; j++) {
                        if (board[j,i] == "__") { return false; };
                    }
                }
                break;
            case 'J':
                for (int i = 1; i < 3; i++) {
                    for (int j = 0; j < 4; j += 3) {
                        if (board[j,i] == "__") { return false; };
                    }
                }
                break;
            default: //Then check if there's any empty spaces at all
                for (int i = 0; i < 4; i++) {
                    for (int j = 0; j < 4; j++) {
                        if (board[j,i] == "__") {
                            return false;
                        }
                    }
                }
                break;
        };

        //Then check if there're any available matches
        Coords tile_a = new Coords();
        Coords tile_b = new Coords();
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                for (int k = 0; k < 4; k++) {
                    for (int l = 0; l < 4; l++) {
                        tile_a.Set(j,i);
                        tile_b.Set(l,k);
                        if (Matches(tile_a,tile_b)) { 
                            return false; };
                    }
                }
            }
        }
        return true;
    }

    //Update_Display helper function; to see if the player has won
    private bool Player_Has_Won() {
        //Check the Kings in the Corners
        for (int i = 0; i < 4; i += 3) {
            for (int j = 0; j < 4; j += 3) {
                
                if (board[j,i][0] != 'K') { return false; };
            }
        }
        //Check for Queens
        for (int i = 0; i < 4; i += 3) {
            for (int j = 1; j < 3; j++) {
                if (board[j,i][0] != 'Q') { return false; };
            }
        }
        //Check for Jacks
        for (int i = 1; i < 3; i++) {
            for (int j = 0; j < 4; j += 3) {
                if (board[j,i][0] != 'J') { return false; };
            }
        }

        return true;
    }

    //Update the display and check for win/lose conditions
    private void Update_Display() {
        //Check for Victory
        if (current_card_index >= 52) { //If we've reached the deck, assume the player has won.
            output_message_0 = "Click 'New Game' to play again.";
            output_image = "__";
            output_message_1 = "YOU WIN!";
            if (board[1,1] == "__" && board[1,2] == "__" && board[2,1] ==  "__" && board[2,2] == "__") { //If the board is completely cleared, shut off inputs.
                game_on = false;
            }
            return;
        }
        //Since we have a next card, display it.
        output_message_0 = "Your next card:";
        output_image = deck[current_card_index];
        
        //Check for more IMMEDIATE Victory
        if (Player_Has_Won()) {
            output_message_1 = "YOU WIN!";
        } else {
            //If the game just started...
            if (current_card_index == 0) {
                output_message_1 = "Loaded a New Game.";

            //Check for Defeat
            } else if (No_Valid_Moves(deck[current_card_index])) {
                output_message_1 = "NO VALID MOVES.";
                game_on = false;
            } else {
                output_message_1 = " ";
            }
        }
    }

    //A quick helper for Update_Selected_Tile to check if the card is a face card
    public bool Is_Face_Card(string card) {
        switch (card[0]) {
            case 'K':
            case 'Q':
            case 'J':
                return true;
            default:
                return false;
        }
    }

    //Update the selected_tile, then call the JavaScript in `Game.cshtml`
    public void Update_Selected_Tile(int y_par, int x_par, bool valid=true) {
        //Update the selected_tile
        if (!valid || Is_Face_Card(board[y_par,x_par])) {
            selected_tile.Reset();
            valid = false;
        } else {
            selected_tile.Set(y_par,x_par);
        }

        //Call Javascript to update the highlights
        JS.InvokeVoidAsync("Set_Selected", y_par, x_par, valid);
    }

    /* INPUT FUNCTIONS */
    //Most important function; runs every time a button is pressed
    private void Trigger(int y, int x) {
        if (game_on) {
            

            //If the tile is blank, place the card there (if it's a legal move)
            if (board[y,x] == "__") {
                if (current_card_index < 52 && ValidMove(new Coords(y,x), deck[current_card_index]) == 0) {
                    //Place a Card
                    undo_stack.Append(0, deck[current_card_index], new Coords(y,x));
                    board[y,x] = deck[current_card_index];
                    current_card_index++;
                    Update_Display();
                    Update_Selected_Tile(y, x, false);
                };

            //If we've already selected a tile for matching, match it (if it's a legal move)
            } else if (selected_tile.is_valid) {
                if (Matches(selected_tile, new Coords(y,x))) {
                    //Match two Cards
                    undo_stack.Append(1, board[selected_tile.y,selected_tile.x], selected_tile, board[y,x], new Coords(y,x));
                    board[selected_tile.y,selected_tile.x] = "__";
                    board[y,x] = "__";
                    Update_Display();
                } else {
                    output_message_1 = $"The {To_Text(board[selected_tile.y,selected_tile.x])} does not match the {To_Text(board[y,x])}.";
                };
                
                Update_Selected_Tile(y, x, false);
            //If no tile has been selected for matching, select this tile
            } else {
                Update_Selected_Tile(y, x);
            };
        }
    }

    //Undo the previous action
    private void Undo() {
        Action_Node latest_action = undo_stack.Pop();
        if (latest_action.action_code == 0) {
            //Unplace a card
            board[latest_action.tile_a.y,latest_action.tile_a.x] = "__";
            current_card_index--;
            Update_Display();
            output_message_1 = "Unplayed a card.";
        } else {
            if (latest_action.card_a == latest_action.card_b) {
                //Replace a 10
                board[latest_action.tile_a.y,latest_action.tile_a.x] = latest_action.card_a;
                output_message_1 = "Unmatched a card.";
            } else {
                //Teplace matched cards
                board[latest_action.tile_a.y,latest_action.tile_a.x] = latest_action.card_a;
                board[latest_action.tile_b.y,latest_action.tile_b.x] = latest_action.card_b;
                output_message_1 = "Unmatched two cards.";
            }
        }
        game_on = true;
    }

    //Reset the game
    private void New_Game() {
        board = new string[4,4] {
        {"__","__","__","__"},
        {"__","__","__","__"},
        {"__","__","__","__"},
        {"__","__","__","__"}};
        deck = new string[] {
        "AD","2D","3D","4D","5D","6D","7D","8D","9D","0D","JD","QD","KD",
        "AH","2H","3H","4H","5H","6H","7H","8H","9H","0H","JH","QH","KH",
        "AC","2C","3C","4C","5C","6C","7C","8C","9C","0C","JC","QC","KC",
        "AS","2S","3S","4S","5S","6S","7S","8S","9S","0S","JS","QS","KS"};
        undo_stack = new Actions_List();
        Shuffle(deck);
        while (Is_Not_Winnable(deck)) { Shuffle(deck); };
        current_card_index = 0;
        Update_Display();
        game_on = true;
    }
}

<!-- TODO 
Make it Pretty
 - Have Page Scale with browser size

Add some Usability
 - Automatically start new game when the page loads

User Testing
 - User Testing
-->